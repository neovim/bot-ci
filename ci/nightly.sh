#!/bin/bash -e

BUILD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source ${BUILD_DIR}/ci/common/common.sh
source ${BUILD_DIR}/ci/common/dependencies.sh
source ${BUILD_DIR}/ci/common/github-api.sh
source ${BUILD_DIR}/ci/common/neovim.sh

NIGHTLY_DIR=${NIGHTLY_DIR:-${BUILD_DIR}/build/nightly}
NIGHTLY_FILE=${NIGHTLY_FILE:-${BUILD_DIR}/build/nightly.tar.gz}
NIGHTLY_TAG=${NIGHTLY_RELEASE:-nightly}

build_nightly() {(
  require_environment_variable NEOVIM_DIR "${BASH_SOURCE[0]}" ${LINENO}

  mkdir -p ${NIGHTLY_DIR}

  cd ${NEOVIM_DIR}
  make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX:PATH=/neovim-linux64"
  make DESTDIR="${NIGHTLY_DIR}" install
)}

create_nightly_tarball() {(
  cd ${NIGHTLY_DIR}
  tar cfz ${NIGHTLY_FILE} neovim-linux64
)}

get_release_body() {
  echo 'Autogenerated nightly build of Neovim.'
  echo
  echo "**Note**: This build is intended for developers and won't work on your system out-of-the-box. If you want to try Neovim, please refer to the [install instructions on the Neovim wiki](https://github.com/neovim/neovim/wiki/Installing)."
  echo ''
  echo 'If you are a developer, see the [`bot-ci` README](https://github.com/neovim/bot-ci/blob/master/README.md#nightly-builds) to learn if the nightly build can be useful for you.'
  echo
  echo '```'
  ${NIGHTLY_DIR}/neovim-linux64/bin/nvim --version
  echo '```'
}

upload_nightly() {
  require_environment_variable NEOVIM_REPO "${BASH_SOURCE[0]}" ${LINENO}
  require_environment_variable NEOVIM_BRANCH "${BASH_SOURCE[0]}" ${LINENO}
  require_environment_variable NEOVIM_COMMIT "${BASH_SOURCE[0]}" ${LINENO}

  local release_id
  read release_id < <( \
    send_gh_api_request repos/${NEOVIM_REPO}/releases \
    | jq -r -c "(.[] | select(.tag_name == \"${NIGHTLY_TAG}\").id), \"\"") \
    || exit

  if [[ -z "${release_id}" ]]; then
    echo "Creating release for tag ${NIGHTLY_TAG}."
    read release_id < <( \
      send_gh_api_data_request repos/${NEOVIM_REPO}/releases POST \
      "{ \"name\": \"Nightly build\", \"tag_name\": \"${NIGHTLY_TAG}\", \
      \"prerelease\": true }" \
      | jq -r -c '.id') \
      || exit
  else
    echo 'Deleting old nightly tarballs.'
    local asset_id
    while read asset_id; do
      [[ -n "${asset_id}" ]] && \
        send_gh_api_request repos/${NEOVIM_REPO}/releases/assets/${asset_id} \
        DELETE \
        > /dev/null
    done < <( \
      send_gh_api_request repos/${NEOVIM_REPO}/releases/${release_id}/assets \
      | jq -r -c '.[].id') \
      || exit
  fi

  echo 'Updating release description.'
  send_gh_api_data_request repos/${NEOVIM_REPO}/releases/${release_id} PATCH \
    "{ \"body\": $(get_release_body | jq -s -c -R '.') }" \
    > /dev/null

  echo "Updating ${NIGHTLY_TAG} tag to point to ${NEOVIM_COMMIT}."
  send_gh_api_data_request repos/${NEOVIM_REPO}/git/refs/tags/${NIGHTLY_TAG} PATCH \
    "{ \"force\": true, \"sha\": \"${NEOVIM_COMMIT}\" }" \
    > /dev/null

  echo 'Uploading nightly tarball.'
  upload_release_asset ${NIGHTLY_FILE} "neovim-linux64.tar.gz" \
    ${NEOVIM_REPO} ${release_id} \
    > /dev/null
}

has_current_nightly() {
  local nightly_commit
  read nightly_commit < <( \
    send_gh_api_request repos/${NEOVIM_REPO}/tags \
    | jq -r -c "(.[] | select(.name == \"${NIGHTLY_TAG}\").commit.sha), \"\"") \
    || exit

  if [[ "${nightly_commit}" != "${NEOVIM_COMMIT}" ]]; then
    echo "${NIGHTLY_TAG} tag does not point to ${NEOVIM_COMMIT}, continuing."
    return 1
  fi

  echo "${NIGHTLY_TAG} tag already points to ${NEOVIM_COMMIT}, exiting."
}

is_ci_build && {
  install_jq
}

clone_neovim

has_current_nightly || {
  build_nightly
  create_nightly_tarball
  upload_nightly
}
